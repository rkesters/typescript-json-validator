// organize-imports-ignore

/// GENERATED BY genTypes script
import {
	AlertType,
	AnalyticsState,
	BlockType,
	EquipmentLifecycle,
	EquipmentStatus,
	PlatformType,
	PortDirectionType,
	PortTypeKind,
	TemplatePlatformsStatus,
	IAlert,
	INewAlert,
	INewAlertPartial,
	IAnalytics,
	INewAnalytics,
	INewAnalyticsPartial,
	IBlock,
	INewBlock,
	INewBlockPartial,
	IBlocksView,
	INewBlocksView,
	INewBlocksViewPartial,
	IDataType,
	INewDataType,
	INewDataTypePartial,
	IDriverBlock,
	INewDriverBlock,
	INewDriverBlockPartial,
	IEquipmentGroup,
	INewEquipmentGroup,
	INewEquipmentGroupPartial,
	IEquipmentGroupsView,
	INewEquipmentGroupsView,
	INewEquipmentGroupsViewPartial,
	IEquipmentImage,
	INewEquipmentImage,
	INewEquipmentImagePartial,
	IEquipmentType,
	INewEquipmentType,
	INewEquipmentTypePartial,
	IFlow,
	INewFlow,
	INewFlowPartial,
	IMetricQueryParameter,
	INewMetricQueryParameter,
	INewMetricQueryParameterPartial,
	IMetricSource,
	INewMetricSource,
	INewMetricSourcePartial,
	IMetricTemplateToQuery,
	INewMetricTemplateToQuery,
	INewMetricTemplateToQueryPartial,
	IMetricTemplate,
	INewMetricTemplate,
	INewMetricTemplatePartial,
	INotification,
	INewNotification,
	INewNotificationPartial,
	IPlatform,
	INewPlatform,
	INewPlatformPartial,
	INewPlatformsView,
	INewPlatformsViewPartial,
	IPortType,
	INewPortType,
	INewPortTypePartial,
	IPort,
	INewPort,
	INewPortPartial,
	IScheduledAction,
	INewScheduledAction,
	INewScheduledActionPartial,
	ISubsToNotification,
	INewSubsToNotification,
	INewSubsToNotificationPartial,
	ISubscription,
	INewSubscription,
	INewSubscriptionPartial,
	ISurveyResult,
	INewSurveyResult,
	INewSurveyResultPartial,
	ITemplateEquipmentGroup,
	INewTemplateEquipmentGroup,
	INewTemplateEquipmentGroupPartial,
	ITemplatePlatformEquipment,
	INewTemplatePlatformEquipment,
	INewTemplatePlatformEquipmentPartial,
	ITemplatePlatform,
	INewTemplatePlatform,
	INewTemplatePlatformPartial,
	ITemplatePort,
	INewTemplatePort,
	INewTemplatePortPartial,
} from './generated/basicTypes';
export {
	AlertType,
	AnalyticsState,
	BlockType,
	EquipmentLifecycle,
	EquipmentStatus,
	PlatformType,
	PortDirectionType,
	PortTypeKind,
	TemplatePlatformsStatus,
	IAlert,
	INewAlert,
	INewAlertPartial,
	IAnalytics,
	INewAnalytics,
	INewAnalyticsPartial,
	IBlock,
	INewBlock,
	INewBlockPartial,
	IBlocksView,
	INewBlocksView,
	INewBlocksViewPartial,
	IDataType,
	INewDataType,
	INewDataTypePartial,
	IDriverBlock,
	INewDriverBlock,
	INewDriverBlockPartial,
	IEquipmentGroup,
	INewEquipmentGroup,
	INewEquipmentGroupPartial,
	IEquipmentGroupsView,
	INewEquipmentGroupsView,
	INewEquipmentGroupsViewPartial,
	IEquipmentImage,
	INewEquipmentImage,
	INewEquipmentImagePartial,
	IEquipmentType,
	INewEquipmentType,
	INewEquipmentTypePartial,
	IFlow,
	INewFlow,
	INewFlowPartial,
	IMetricQueryParameter,
	INewMetricQueryParameter,
	INewMetricQueryParameterPartial,
	IMetricSource,
	INewMetricSource,
	INewMetricSourcePartial,
	IMetricTemplateToQuery,
	INewMetricTemplateToQuery,
	INewMetricTemplateToQueryPartial,
	IMetricTemplate,
	INewMetricTemplate,
	INewMetricTemplatePartial,
	INotification,
	INewNotification,
	INewNotificationPartial,
	IPlatform,
	INewPlatform,
	INewPlatformPartial,
	INewPlatformsView,
	INewPlatformsViewPartial,
	IPortType,
	INewPortType,
	INewPortTypePartial,
	IPort,
	INewPort,
	INewPortPartial,
	IScheduledAction,
	INewScheduledAction,
	INewScheduledActionPartial,
	ISubsToNotification,
	INewSubsToNotification,
	INewSubsToNotificationPartial,
	ISubscription,
	INewSubscription,
	INewSubscriptionPartial,
	ISurveyResult,
	INewSurveyResult,
	INewSurveyResultPartial,
	ITemplateEquipmentGroup,
	INewTemplateEquipmentGroup,
	INewTemplateEquipmentGroupPartial,
	ITemplatePlatformEquipment,
	INewTemplatePlatformEquipment,
	INewTemplatePlatformEquipmentPartial,
	ITemplatePlatform,
	INewTemplatePlatform,
	INewTemplatePlatformPartial,
	ITemplatePort,
	INewTemplatePort,
	INewTemplatePortPartial,
};
/// GENERATED BY genTypes script

import type { Uuid } from '../uuid';
import type { Equipment, PlatformsView, TemplateEquipment, Schemas } from './generated/schema_types';
import type { JSONSchema7 } from 'json-schema';

export type IJSONSchema7 = JSONSchema7;

export type IUiSchemaNoReact = {
	'ui:field'?: string;
	'ui:widget'?: string;
	'ui:options'?: {
		[key: string]: boolean | number | string | Record<string, unknown> | unknown[] | null;
	};
	'ui:order'?: string[];
	[name: string]: unknown;
};

export interface ISchema extends Omit<Schemas, 'schema' | 'uischema'> {
	schema: JSONSchema7;
	uischema?: IUiSchemaNoReact;
}
export type INewSchema = Omit<ISchema, 'id'>;
export type INewSchemaPartial = Partial<INewSchema>;

// eslint-disable-next-line @typescript-eslint/naming-convention
export enum MetricOperations {
	LessThan = 0,
	LessThanEqual,
	GreatThan,
	GreatThanEqual,
	Equal,
	NotEqual,
}
export interface IMetricRanges {
	operation: MetricOperations;
	value: number;
}

export type INewMetricRanges = IMetricRanges;
export type INewMetricRangesPartial = Partial<IMetricRanges>;

export interface IEqupimentMetricConfiguration {
	id: number;
	metric: IMetricTemplateExpanded;
	healthy: IMetricRanges;
	degraded?: IMetricRanges;
	failed: IMetricRanges;
	query?: { [k: string]: string };
}

export type INewEqupimentMetricConfiguration = Omit<IEqupimentMetricConfiguration, 'id'>;
export type INewEqupimentMetricConfigurationPartial = Partial<INewEqupimentMetricConfiguration>;
export interface ITemplatePlatformEquipmentWithCount extends Omit<ITemplatePlatformEquipment, 'count'> {
	count: number;
}

export interface ITemplateEquipmentExpandedCount extends ITemplateEquipmentExpanded {
	count: number;
}
export interface ITemplatePlatformExpanded extends ITemplatePlatform {
	templateEquipment: ITemplateEquipmentExpandedCount[];
}

export type INewTemplatePlatformExpanded = Omit<ITemplatePlatformExpanded, 'id'>;

export type IEquipmentPort = Omit<IPort, 'blockId'>;
export type IBlockPort = Omit<IPort, 'equipmentId'>;

export type INewEquipmentPort = Omit<IEquipmentPort, 'id'>;
export type INewBlockPort = IBlockPort;

export interface IPortExpanded extends Omit<IPort, 'portTypeId' | 'connectedToId' | 'configSchemasId'> {
	portType: IPortType;
	connectedTo: IPortExpanded[];
	subPort?: string;
	configSchema?: ISchema;
}

export type IEquipmentPortExpanded = Omit<IPortExpanded, 'blockId'>;
export type IBlockPortExpanded = Omit<IPortExpanded, 'equipmentId'>;
export type INewPortExpanded = Omit<IPortExpanded, 'id'>;
export type INewEquipmentPortExpanded = Omit<IEquipmentPortExpanded, 'id'>;
export type INewBlockPortExpanded = Omit<IBlockPortExpanded, 'id'>;

export interface IEquipment extends Equipment {
	metric?: { data: IEqupimentMetricConfiguration[] };
}

export type INewEquipment = Omit<IEquipment, 'id' | 'hash'>;
export type INewEquipmentPartial = Partial<INewEquipment>;

export interface IEquipmentExpanded extends Omit<IEquipment, 'configSchemasId' | 'equipmentTypeId' | 'frontImageId' | 'backImageId' | 'internalImageId' | 'driverId'> {
	parent?: IEquipment | IEquipmentExpanded;
	children?: IEquipmentExpanded[];
	ports?: IEquipmentPortExpanded[];
	frontImage?: IEquipmentImageMeta;
	backImage?: IEquipmentImageMeta;
	internalImage?: IEquipmentImageMeta;
	treeStatus?: EquipmentStatus;
	equipmentType?: IEquipmentType;
	driver?: IBlocksViewExpanded;
	configSchema?: ISchema;

	/**
	 * Group-specific information about this equipment. This should only be
	 * populated when this piece of equipment itself is a group.
	 */
	groupDetails?: Omit<IEquipmentGroup, 'id'>;
}
export interface INewEquipmentExpanded extends Omit<IEquipmentExpanded, 'id' | 'hash' | 'configSchema'> {
	configSchema?: Partial<ISchema>;
}
export interface IUpdateExpandedEquipment extends Omit<IEquipmentExpanded, 'parent' | 'createdAt' | 'updatedAt' | 'hash' | 'configSchema'> {
	createdAt?: Date;
	updatedAt?: Date;
	hash?: string;
	parent?: IEquipment | IEquipmentExpanded;
	configSchema?: Partial<ISchema>;
}

export type ITemplateEquipmentPort = ITemplatePort;
export type INewTemplateEquipmentPort = Omit<ITemplateEquipmentPort, 'id'>;
export interface ITemplatePortExpanded extends Omit<ITemplatePort, 'portTypeId' | 'connectedToId'> {
	portType: IPortType;
	connectedTo: ITemplatePortExpanded[];
	subPort?: string;
}

export type ITemplateEquipmentPortExpanded = ITemplatePortExpanded;

export type INewTemplatePortExpanded = Omit<ITemplatePortExpanded, 'id'>;
export type INewTemplateEquipmentPortExpanded = Omit<ITemplateEquipmentPortExpanded, 'id'>;

export type ITemplateEquipment = TemplateEquipment;

export type INewTemplateEquipment = Omit<ITemplateEquipment, 'id' | 'hash'>;
export type INewTemplateEquipmentPartial = Partial<INewTemplateEquipment>;

export interface ITemplateEquipmentExpanded extends Omit<ITemplateEquipment, 'equipmentTypeId'> {
	parent?: ITemplateEquipment | ITemplateEquipmentExpanded;
	children?: ITemplateEquipmentExpanded[];
	ports?: ITemplateEquipmentPortExpanded[];
	equipmentType?: IEquipmentType;
}
export type INewTemplateEquipmentExpanded = Omit<ITemplateEquipmentExpanded, 'id' | 'hash'>;
export interface IUpdateTemplateExpandedEquipment extends Omit<ITemplateEquipmentExpanded, 'parent' | 'createdAt' | 'updatedAt' | 'hash'> {
	createdAt?: Date;
	updatedAt?: Date;
	hash?: string;
	parent?: ITemplateEquipment | ITemplateEquipmentExpanded;
}

export type IMessage = string;

export interface IPlatformsView extends Omit<PlatformsView, 'id' | 'configuration'> {
	id: Uuid;
	configuration?: IPlatformConfiguration;
}

export interface IMetricQueryParameterExpanded extends IMetricQueryParameter {
	dataType: IDataType;
}

export type INewMetricQueryParameterExpanded = Omit<IMetricQueryParameterExpanded, 'id'>;

export interface IMetricTemplateExpanded extends IMetricTemplate {
	dataType: IDataType;
	queryParameters: IMetricQueryParameterExpanded[];
}

export type INewMetricTemplateExpanded = Omit<IMetricTemplateExpanded, 'id'>;

export type IEquipmentImageMeta = Omit<IEquipmentImage, 'image'>;

export interface IEquipmentTreeStatusUpdateEvent {
	[id: string]: EquipmentStatus;
}

export interface IPlatformConfiguration {
	webPlugins?: Record<string, string>;
}

export interface IEquipmentStatusUpdatedEvent {
	equipmentId: Uuid;
	newStatus: EquipmentStatus;
}

export interface IBlocksViewExpanded extends Omit<IBlocksView, 'configSchemasId'> {
	ports?: IBlockPortExpanded[];
	configSchema?: ISchema;
}

export type INewBlocksViewExpanded = IBlocksViewExpanded;

export interface IFlowgraphBlock {
	entryId: string;
	blockId: Uuid;
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	parameters: any;
	positionX?: number;
	positionY?: number;
}

export interface IFlowgraphConnection {
	sourceEntryId: string;
	sourcePortId: Uuid;
	destinationEntryId: string;
	destinationPortId: Uuid;
}

export interface IFlowgraph {
	blocks: IFlowgraphBlock[];
	connections: IFlowgraphConnection[];
}

export interface IFlowExpanded extends Omit<IFlow, 'flowgraph'> {
	flowgraph: IFlowgraph;
}
export type INewFlowExpanded = Omit<IFlowExpanded, 'id'>;

export interface IFFTResultEntry {
	frequency: number;
	power: number;
}

export interface ISurveyResultExpanded extends Omit<ISurveyResult, 'frequency' | 'power'> {
	fftResult: IFFTResultEntry[];
}

export type INewSurveyResultExpanded = Omit<ISurveyResultExpanded, 'id'>;

export interface IAnalyticsExpanded extends Omit<IAnalytics, 'configSchemasId'> {
	configSchema?: ISchema;
}

export interface INewAnalyticsExpanded extends Omit<INewAnalytics, 'configSchemasId'> {
	configSchema?: ISchema;
}
